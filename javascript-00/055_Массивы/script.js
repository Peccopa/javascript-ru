'use strict';

// Операции с массивами
// важность: 5
// Давайте произведём 5 операций с массивом.

// Создайте массив styles с элементами «Джаз» и «Блюз».
// const styles = ['Джаз', 'Блюз'];
// console.log(styles);
// // Добавьте «Рок-н-ролл» в конец.
// styles.push('Рок-н-ролл');
// console.log(styles);
// // Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
// styles[Math.trunc((styles.length - 1) / 2)] = 'Классика';
// console.log(styles);
// // Удалите первый элемент массива и покажите его.
// console.log(styles.shift());
// // Вставьте Рэп и Регги в начало массива.
// styles.unshift('Рэп', 'Регги')
// console.log(styles);
// Массив по ходу выполнения операций:
// Джаз, Блюз
// Джаз, Блюз, Рок-н-ролл
// Джаз, Классика, Рок-н-ролл
// Классика, Рок-н-ролл
// Рэп, Регги, Классика, Рок-н-ролл

// Сумма введённых чисел
// важность: 4
// Напишите функцию sumInput(), которая:
// Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
// Подсчитывает и возвращает сумму элементов массива.
// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».
// const sumInput = function () {
//   const arr = [];
//   let number;
//   do {
//     number = prompt('Enter the number: ');
//     if (number !== null && number !== '') {
//       number = Number(number);
//       if (!isNaN(number)) arr.push(number);
//     }
//   } while (typeof number === 'number' && !isNaN(number));
//   return arr.length > 0 ? arr.reduce((acc, curr) => acc + curr) : 0;
// };
// console.log(sumInput());

// Подмассив наибольшей суммы
// важность: 2
// На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].
// Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.
// Функция getMaxSubSum(arr) должна возвращать эту сумму.
// Например:
// getMaxSubSum([-1, 2, 3, -9]) == 5 (сумма выделенных элементов)
// getMaxSubSum([2, -1, 2, 3, -9]) == 6
// getMaxSubSum([-1, 2, 3, -9, 11]) == 11
// getMaxSubSum([-2, -1, 1, 2]) == 3
// getMaxSubSum([100, -9, 2, -3, 5]) == 100
// getMaxSubSum([1, 2, 3]) == 6 (берём все)
// Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:
// getMaxSubSum([-1, -2, -3]) = 0
// Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.
const arr = [-2, -1, 1, 2];
const getMaxSubSum = function (arr) {
  let maxSum = 0;
  let partialSum = 0;
  for (const item of arr) {
    partialSum += item;
    maxSum = Math.max(partialSum, maxSum);
    if (partialSum < 0) partialSum = 0;
  }
  return maxSum;
};
console.log(getMaxSubSum(arr));
